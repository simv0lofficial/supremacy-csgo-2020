#pragma once

namespace supremacy::hacks {
	class c_exploits {
	private:
		int compute_type() const;

		bool					m_charged{},
			m_dt_ready{};
		int						m_ticks_allowed{}, m_cur_hide_shift_amount{}, m_cur_shift_amount{},
			m_next_shift_amount{}, m_recharge_cmd{}, m_type{}, m_correction_amount{};
		bool					m_in_charge;
	public:
		void manage_wpn(valve::user_cmd_t& user_cmd);

		bool try_to_recharge();

		int calc_correction_ticks() const;

		int adjust_tick_base(
			const int old_new_cmds,
			const int total_new_cmds, const int delta
		) const;

		void handle_our_tick_base_shift(
			const std::uintptr_t ecx, const std::uintptr_t edx, const int slot,
			valve::bf_write_t* buffer, int& from, int& to, valve::move_msg_t* move_msg
		);

		__forceinline int& ticks_allowed();

		__forceinline int& recharge_cmd();

		__forceinline int& type();

		__forceinline bool& charged();

		__forceinline int& cur_hide_shift_amount();

		__forceinline int& cur_shift_amount();

		__forceinline int& next_shift_amount();

		__forceinline int& correction_amount();

		__forceinline bool& dt_ready();

		__forceinline bool& in_charge();
	};

	inline const auto g_exploits = std::make_unique< c_exploits >();
}

#include "impl/exploits.inl"